/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/programs": {
    /**
     * List of programs available to members 
     * @description 主にマイページ向けの、特定の会員の拝聴可能なRadioプログラムの一覧取得API
     */
    get: operations["getPrograms"];
    /**
     * Create Program 
     * @description Radioプログラム登録API
     */
    post: operations["createProgram"];
  };
  "/programs/{id}": {
    /**
     * Get program's chapters 
     * @description プログラム内の音声データ一覧を取得するAPI
     */
    get: operations["getProgramChapters"];
    /**
     * Edit program 
     * @description Radioプログラム編集API（オーナー向け）
     */
    put: operations["putProgram"];
    parameters: {
      path: {
        id: number;
      };
    };
  };
  "/programs/of_club/{id}": {
    /**
     * GET Club's programs. 
     * @description クラブに登録されているプログラム一覧を取得するAPI
     */
    get: operations["getClubPrograms"];
    parameters: {
      path: {
        id: number;
      };
    };
  };
  "/programs/of_club/{id}/for_owner": {
    /**
     * GET Club's Programs For Owner's Admin page. 
     * @description クラブに登録されているプログラム一覧を取得するAPI。オーナー管理画面向け（下書きでフィルター機能がある）
     */
    get: operations["getClubProgramsForOwner"];
    parameters: {
      path: {
        id: number;
      };
    };
  };
  "/programs/reserved_to_pubslish": {
    /**
     * Switch reserved all program to publish 
     * @description 放送開始設定が、予約投稿になっていてかつ、予約投稿時間が過去になっているプログラム全てを、公開状態にするAPI。
     * （AWSのLambdaから定期的にリクエストが飛ぶ）
     */
    patch: operations["patchProgramsReservedToPublish"];
  };
  "/reaction_comments/of_program/{programId}": {
    /**
     * Get Program Reaction Comments 
     * @description 特定のプログラムのリアクションコメントを取得するAPI
     */
    get: operations["getProgramReactionComments"];
    /**
     * Create Program Reaction Comment 
     * @description 特定のプログラムにリアクションコメントをするAPI
     */
    post: operations["createProgramReactionComment"];
    parameters: {
      path: {
        programId: number;
      };
    };
  };
  "/reaction_comments/like_toggle/{commentId}": {
    /**
     * Like ON/OFF 
     * @description 指定したコメントIDをLikeをON/OFFするAPI
     */
    patch: operations["patchReactionCommentsLikeToggleId"];
    parameters: {
      path: {
        commentId: number;
      };
    };
  };
  "/reaction_comments/{commentId}": {
    /**
     * Delete Reaction Comment 
     * @description リアクションコメントを削除するAPI。(コメント投稿者向け)
     */
    delete: operations["deleteReactionCommentsCommentId"];
    /**
     * Hidden Reaction Comment 
     * @description リアクションコメントを非表示/表示にするトグルAPI。（オーナー向け）
     */
    patch: operations["patchReactionCommentsCommentId"];
    parameters: {
      path: {
        commentId: number;
      };
    };
  };
  "/play_logs": {
    /** @description 特定のユーザーの再生履歴を返すAPI */
    get: operations["getPlayLogs"];
    /**
     * End record chapter play log. 
     * @description チャプター再生の終了時に叩くAPI。再生停止時に経過時間をrequest bodyに入れるようにする。
     */
    put: operations["chapterOfPlayLogEndChapterId"];
  };
  "/chapters/{id}": {
    /**
     * Delete Chapter's media file. 
     * @description Chapterデータを論理削除するのと、S3から音声ファイルを削除するAPI（登録済みデータのみ。つまり、編集中のみ使うAPI）
     */
    delete: operations["deleteChapterId"];
    parameters: {
      path: {
        id: number;
      };
    };
  };
  "/pre_signed_url": {
    /**
     * Publish pre-signed URL 
     * @description 音声メディアファイルをs3に直接アップロードするためのURLを発行するためのAPI
     */
    post: operations["postPublishPreSignedUrl"];
  };
  "/healthcheck": {
    /**
     * healthcheck 
     * @description healthcheck
     */
    get: operations["getHealthcheck"];
  };
  "/programs/of_club/{id}/for_attached_pin": {
    /**
     * Your GET endpoint 
     * @description クラブに登録されている固定プログラムの一覧を取得するAPI
     */
    get: operations["getProgramsOfClubIdForAttachedPin"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Program 
     * @description Chapterの集合体
     */
    Program: {
      id: number;
      club: components["schemas"]["Club"];
      title: string;
      description: string;
      broadcastStatus: number;
      scope: number;
      chapters: (components["schemas"]["Chapter"])[];
      attachedPlans: (components["schemas"]["Plan"])[];
      isAttachedPin: boolean;
      reactionCommentsCount: number;
      /** Format: date-time */
      reservedAt?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /**
     * Chapter 
     * @description 音声ファイルとその説明
     */
    Chapter: {
      id: number;
      programId: number;
      order: number;
      title: string;
      /** @description 固定表示ON/OFF */
      isAttachedPin: boolean;
      mediaUrl: string;
      playLog?: components["schemas"]["PlayLog"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      deletedAt?: string;
    };
    /** Plan */
    Plan: {
      id: number;
      clubId: number;
      name: string;
      info: string;
      image?: string;
    };
    /** Club */
    Club: {
      id: number;
      name: string;
      slug: string;
      overview: string;
      icon?: string;
      clubColor: string;
      url: string;
      programAttachedPlans: (components["schemas"]["Plan"])[];
      twitter_url?: string;
      facebook_url?: string;
      line_url?: string;
      instagram_url?: string;
      youtube_url?: string;
      tiktok_url?: string;
    };
    /** ReactionComment */
    ReactionComment: {
      id: number;
      content: string;
      likedProfiles: (components["schemas"]["Profile"])[];
      profile: components["schemas"]["Profile"];
      isLiked: boolean;
      /** @description オーナーがコメントを非表示にしているかどうか判定をする */
      isHidden: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      deletedAt?: string;
    };
    /**
     * Profile 
     * @description ユーザプロファイル（会員、オーナー、通りすがりの人がありえる）
     */
    Profile: {
      id: string;
      name: string;
      thumbnail?: string;
      isPublicProfile: boolean;
      /** @description owner or member or passerby */
      type: string;
    };
    /** PlayLog */
    PlayLog: {
      id: number;
      programId: number;
      chapterId: number;
      profileId: string;
      elapsedSeconds: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      chapter: components["schemas"]["Chapter"];
      program: components["schemas"]["Program"];
    };
  };
  responses: {
    /** @description Example response */
    Programs: {
      content: {
        "application/json": {
          programs: (components["schemas"]["Program"])[];
        };
      };
    };
    /** @description Example response */
    Chapters: {
      content: {
        "application/json": {
          chapters: (components["schemas"]["Chapter"])[];
        };
      };
    };
    /** @description Example response */
    ReactionComments: {
      content: {
        "application/json": {
          reactionComments: (components["schemas"]["ReactionComment"])[];
          nextCursor?: string;
          totalCounts?: number;
        };
      };
    };
    /** @description Example response */
    Program: {
      content: {
        "application/json": {
          program: components["schemas"]["Program"];
        };
      };
    };
    /** @description Example response */
    ReactionComment: {
      content: {
        "application/json": {
          reactionComment: components["schemas"]["ReactionComment"];
        };
      };
    };
    /** @description PreSignedUrlが、S3アップロード用のURLです。s3Urlが、radioファイル等のファイル登録時のfilesのurlに埋め込むURLです。 */
    PreSignedUrl: {
      content: {
        "application/json": {
          preSignedUrl?: string;
          s3Url?: string;
        };
      };
    };
    /** @description Example response */
    Chapter: {
      content: {
        "application/json": {
          chapter: components["schemas"]["Chapter"];
          elapsedSeconds?: number;
        };
      };
    };
    /** @description Example response */
    ChapterPlayLog: {
      content: {
        "application/json": {
          playLogId?: number;
        };
      };
    };
    /** @description Example response */
    PlayLogs: {
      content: {
        "application/json": {
          playLogs: (components["schemas"]["PlayLog"])[];
        };
      };
    };
  };
  parameters: never;
  requestBodies: {
    /**
     * @description scopeは、誰でも見れる=0  プラン入会者しか見れない=1
     * broadcastStatusは、放映中=0, 予約中=1
     * attachedPlansIdsは、紐付けるPlanIdの配列
     */
    Program?: {
      content: {
        "application/json": {
          clubId?: number;
          title?: string;
          description?: string;
          chapters?: ({
              title?: string;
              fileName?: string;
              mediaUrl?: string;
              /** @description mineType 例：image/jpeg */
              contentType?: string;
              playTimeSeconds?: number;
              order?: number;
              id?: number;
            })[];
          scope?: number;
          isDraft?: boolean;
          attachedPlansIds?: (number)[];
          broadcastStatus?: number;
          /**
           * Format: date-time 
           * @description 2022-06-07T14:59:43+09:00
           */
          reservedAt?: string;
        };
      };
    };
    ReactionComment?: {
      content: {
        "application/json": {
          programId?: number;
          contents?: string;
        };
      };
    };
    /**
     * @description contentTypeは無くても良いといえば良いのですが、s3に登録する際のmetadataとして登録します。
     * 
     * 
     * 例：
     * https://fanclove-radio.s3.ap-northeast-1.amazonaws.com/media/1(clubId)/abc.mp3(fileName)?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJTLX7NCWRPA2NHBA%2F20220708%2Fap-northeast-1%2Fs3%2Faws4_request&X-Amz-Date=20220708T140416Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=PutObject&X-Amz-Signature=28d152cf695759fb6a6b86fe858c9ecafd8da298025b24481e2f69b7c153d198
     */
    PreSignedUrl?: {
      content: {
        "application/json": {
          clubId?: number;
          /** @description MineType　例：image/jpeg */
          contentType?: string;
          fileName?: string;
        };
      };
    };
    PutChapterPlayLog?: {
      content: {
        "application/json": {
          programId?: number;
          chapterId?: number;
          elapsedSeconds?: number;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  getPrograms: {
    /**
     * List of programs available to members 
     * @description 主にマイページ向けの、特定の会員の拝聴可能なRadioプログラムの一覧取得API
     */
    responses: {
      200: components["responses"]["Programs"];
    };
  };
  createProgram: {
    /**
     * Create Program 
     * @description Radioプログラム登録API
     */
    requestBody: components["requestBodies"]["Program"];
    responses: {
      200: components["responses"]["Program"];
    };
  };
  getProgramChapters: {
    /**
     * Get program's chapters 
     * @description プログラム内の音声データ一覧を取得するAPI
     */
    responses: {
      200: components["responses"]["Program"];
    };
  };
  putProgram: {
    /**
     * Edit program 
     * @description Radioプログラム編集API（オーナー向け）
     */
    requestBody: components["requestBodies"]["Program"];
    responses: {
      200: components["responses"]["Program"];
    };
  };
  getClubPrograms: {
    /**
     * GET Club's programs. 
     * @description クラブに登録されているプログラム一覧を取得するAPI
     */
    parameters?: {
        /** @description 次ページへのカーソル（ProgramID） */
        /** @description 全て、閲覧可能、プラン別のタブスイッチャー プランの場合は、プランID */
      query?: {
        cursor?: string;
        switch?: string;
      };
    };
    responses: {
      200: components["responses"]["Programs"];
    };
  };
  getClubProgramsForOwner: {
    /**
     * GET Club's Programs For Owner's Admin page. 
     * @description クラブに登録されているプログラム一覧を取得するAPI。オーナー管理画面向け（下書きでフィルター機能がある）
     */
    parameters?: {
        /** @description 次ページへのカーソル（ProgramID） */
        /** @description ONの場合、下書きのみ取得する */
      query?: {
        cursor?: string;
        isOnlyDraft?: boolean;
      };
    };
    responses: {
      200: components["responses"]["Programs"];
    };
  };
  patchProgramsReservedToPublish: {
    /**
     * Switch reserved all program to publish 
     * @description 放送開始設定が、予約投稿になっていてかつ、予約投稿時間が過去になっているプログラム全てを、公開状態にするAPI。
     * （AWSのLambdaから定期的にリクエストが飛ぶ）
     */
    parameters?: {
        /** @description 固定の認証トークン */
      header?: {
        AuthrizedToken?: string;
      };
    };
    responses: {
      /** @description OK */
      200: never;
    };
  };
  getProgramReactionComments: {
    /**
     * Get Program Reaction Comments 
     * @description 特定のプログラムのリアクションコメントを取得するAPI
     */
    parameters?: {
        /** @description asc or desc */
      query?: {
        order?: string;
        cursor?: string;
      };
    };
    responses: {
      200: components["responses"]["ReactionComments"];
    };
  };
  createProgramReactionComment: {
    /**
     * Create Program Reaction Comment 
     * @description 特定のプログラムにリアクションコメントをするAPI
     */
    requestBody: components["requestBodies"]["ReactionComment"];
    responses: {
      200: components["responses"]["ReactionComment"];
    };
  };
  patchReactionCommentsLikeToggleId: {
    /**
     * Like ON/OFF 
     * @description 指定したコメントIDをLikeをON/OFFするAPI
     */
    responses: {
      200: components["responses"]["ReactionComment"];
    };
  };
  deleteReactionCommentsCommentId: {
    /**
     * Delete Reaction Comment 
     * @description リアクションコメントを削除するAPI。(コメント投稿者向け)
     */
    responses: {
      200: components["responses"]["ReactionComment"];
    };
  };
  patchReactionCommentsCommentId: {
    /**
     * Hidden Reaction Comment 
     * @description リアクションコメントを非表示/表示にするトグルAPI。（オーナー向け）
     */
    responses: {
      200: components["responses"]["ReactionComment"];
    };
  };
  getPlayLogs: {
    /** @description 特定のユーザーの再生履歴を返すAPI */
    parameters?: {
      query?: {
        cursor?: string;
      };
    };
    responses: {
      200: components["responses"]["PlayLogs"];
    };
  };
  chapterOfPlayLogEndChapterId: {
    /**
     * End record chapter play log. 
     * @description チャプター再生の終了時に叩くAPI。再生停止時に経過時間をrequest bodyに入れるようにする。
     */
    requestBody: components["requestBodies"]["PutChapterPlayLog"];
    responses: {
      200: components["responses"]["ChapterPlayLog"];
    };
  };
  deleteChapterId: {
    /**
     * Delete Chapter's media file. 
     * @description Chapterデータを論理削除するのと、S3から音声ファイルを削除するAPI（登録済みデータのみ。つまり、編集中のみ使うAPI）
     */
    responses: {
      200: components["responses"]["Chapter"];
    };
  };
  postPublishPreSignedUrl: {
    /**
     * Publish pre-signed URL 
     * @description 音声メディアファイルをs3に直接アップロードするためのURLを発行するためのAPI
     */
    requestBody: components["requestBodies"]["PreSignedUrl"];
    responses: {
      200: components["responses"]["PreSignedUrl"];
    };
  };
  getHealthcheck: {
    /**
     * healthcheck 
     * @description healthcheck
     */
    responses: {
      /** @description OK */
      200: {
        content: {
          "text/plain": string;
        };
      };
    };
  };
  getProgramsOfClubIdForAttachedPin: {
    /**
     * Your GET endpoint 
     * @description クラブに登録されている固定プログラムの一覧を取得するAPI
     */
    responses: {
      200: components["responses"]["Programs"];
    };
  };
}
