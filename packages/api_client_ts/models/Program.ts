/* tslint:disable */
/* eslint-disable */
/**
 * radio_openapi
 * radio_openapi
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@anycloud.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Chapter } from './Chapter';
import {
    ChapterFromJSON,
    ChapterFromJSONTyped,
    ChapterToJSON,
} from './Chapter';
import type { Club } from './Club';
import {
    ClubFromJSON,
    ClubFromJSONTyped,
    ClubToJSON,
} from './Club';
import type { Plan } from './Plan';
import {
    PlanFromJSON,
    PlanFromJSONTyped,
    PlanToJSON,
} from './Plan';

/**
 * Chapterの集合体
 * @export
 * @interface Program
 */
export interface Program {
    /**
     * 
     * @type {number}
     * @memberof Program
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Program
     */
    clubId: number;
    /**
     * 
     * @type {Club}
     * @memberof Program
     */
    club: Club;
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof Program
     */
    broadcastStatus: ProgramBroadcastStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof Program
     */
    scope: ProgramScopeEnum;
    /**
     * 
     * @type {Array<Chapter>}
     * @memberof Program
     */
    chapters: Array<Chapter>;
    /**
     * 
     * @type {Array<Plan>}
     * @memberof Program
     */
    attachedPlans: Array<Plan>;
    /**
     * 
     * @type {boolean}
     * @memberof Program
     */
    isAttachedPin: boolean;
    /**
     * 
     * @type {number}
     * @memberof Program
     */
    reactionCommentsCount: number;
    /**
     * 
     * @type {boolean}
     * @memberof Program
     */
    isDraft?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Program
     */
    reservedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Program
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Program
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const ProgramBroadcastStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;
export type ProgramBroadcastStatusEnum = typeof ProgramBroadcastStatusEnum[keyof typeof ProgramBroadcastStatusEnum];

/**
 * @export
 */
export const ProgramScopeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;
export type ProgramScopeEnum = typeof ProgramScopeEnum[keyof typeof ProgramScopeEnum];


/**
 * Check if a given object implements the Program interface.
 */
export function instanceOfProgram(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "clubId" in value;
    isInstance = isInstance && "club" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "broadcastStatus" in value;
    isInstance = isInstance && "scope" in value;
    isInstance = isInstance && "chapters" in value;
    isInstance = isInstance && "attachedPlans" in value;
    isInstance = isInstance && "isAttachedPin" in value;
    isInstance = isInstance && "reactionCommentsCount" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function ProgramFromJSON(json: any): Program {
    return ProgramFromJSONTyped(json, false);
}

export function ProgramFromJSONTyped(json: any, ignoreDiscriminator: boolean): Program {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'clubId': json['clubId'],
        'club': ClubFromJSON(json['club']),
        'title': json['title'],
        'description': json['description'],
        'broadcastStatus': json['broadcastStatus'],
        'scope': json['scope'],
        'chapters': ((json['chapters'] as Array<any>).map(ChapterFromJSON)),
        'attachedPlans': ((json['attachedPlans'] as Array<any>).map(PlanFromJSON)),
        'isAttachedPin': json['isAttachedPin'],
        'reactionCommentsCount': json['reactionCommentsCount'],
        'isDraft': !exists(json, 'isDraft') ? undefined : json['isDraft'],
        'reservedAt': !exists(json, 'reservedAt') ? undefined : (new Date(json['reservedAt'])),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function ProgramToJSON(value?: Program | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'clubId': value.clubId,
        'club': ClubToJSON(value.club),
        'title': value.title,
        'description': value.description,
        'broadcastStatus': value.broadcastStatus,
        'scope': value.scope,
        'chapters': ((value.chapters as Array<any>).map(ChapterToJSON)),
        'attachedPlans': ((value.attachedPlans as Array<any>).map(PlanToJSON)),
        'isAttachedPin': value.isAttachedPin,
        'reactionCommentsCount': value.reactionCommentsCount,
        'isDraft': value.isDraft,
        'reservedAt': value.reservedAt === undefined ? undefined : (value.reservedAt.toISOString()),
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
    };
}

