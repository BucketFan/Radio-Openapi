/* tslint:disable */
/* eslint-disable */
/**
 * radio_openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Chapter } from './Chapter';
import {
    ChapterFromJSON,
    ChapterFromJSONTyped,
    ChapterToJSON,
} from './Chapter';
import type { Program } from './Program';
import {
    ProgramFromJSON,
    ProgramFromJSONTyped,
    ProgramToJSON,
} from './Program';

/**
 * 
 * @export
 * @interface PlayLog
 */
export interface PlayLog {
    /**
     * 
     * @type {number}
     * @memberof PlayLog
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayLog
     */
    programId?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayLog
     */
    chapterId?: number;
    /**
     * 
     * @type {string}
     * @memberof PlayLog
     */
    profileId?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayLog
     */
    session?: string;
    /**
     * 
     * @type {number}
     * @memberof PlayLog
     */
    playTime?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayLog
     */
    elapsedSeconds?: number;
    /**
     * 
     * @type {string}
     * @memberof PlayLog
     */
    createdAt?: string;
    /**
     * 
     * @type {Chapter}
     * @memberof PlayLog
     */
    chapter?: Chapter;
    /**
     * 
     * @type {Program}
     * @memberof PlayLog
     */
    program?: Program;
}

/**
 * Check if a given object implements the PlayLog interface.
 */
export function instanceOfPlayLog(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PlayLogFromJSON(json: any): PlayLog {
    return PlayLogFromJSONTyped(json, false);
}

export function PlayLogFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlayLog {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'programId': !exists(json, 'programId') ? undefined : json['programId'],
        'chapterId': !exists(json, 'chapterId') ? undefined : json['chapterId'],
        'profileId': !exists(json, 'profileId') ? undefined : json['profileId'],
        'session': !exists(json, 'session') ? undefined : json['session'],
        'playTime': !exists(json, 'playTime') ? undefined : json['playTime'],
        'elapsedSeconds': !exists(json, 'elapsedSeconds') ? undefined : json['elapsedSeconds'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'chapter': !exists(json, 'chapter') ? undefined : ChapterFromJSON(json['chapter']),
        'program': !exists(json, 'program') ? undefined : ProgramFromJSON(json['program']),
    };
}

export function PlayLogToJSON(value?: PlayLog | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'programId': value.programId,
        'chapterId': value.chapterId,
        'profileId': value.profileId,
        'session': value.session,
        'playTime': value.playTime,
        'elapsedSeconds': value.elapsedSeconds,
        'createdAt': value.createdAt,
        'chapter': ChapterToJSON(value.chapter),
        'program': ProgramToJSON(value.program),
    };
}

