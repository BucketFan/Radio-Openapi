/* tslint:disable */
/* eslint-disable */
/**
 * radio_openapi
 * radio_openapi
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@anycloud.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PlayLog } from './PlayLog';
import {
    PlayLogFromJSON,
    PlayLogFromJSONTyped,
    PlayLogToJSON,
} from './PlayLog';

/**
 * 音声ファイルとその説明
 * @export
 * @interface Chapter
 */
export interface Chapter {
    /**
     * 
     * @type {number}
     * @memberof Chapter
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Chapter
     */
    programId: number;
    /**
     * 
     * @type {number}
     * @memberof Chapter
     */
    order: number;
    /**
     * 
     * @type {string}
     * @memberof Chapter
     */
    title: string;
    /**
     * 固定表示ON/OFF
     * @type {boolean}
     * @memberof Chapter
     */
    isAttachedPin: boolean;
    /**
     * 
     * @type {string}
     * @memberof Chapter
     */
    mediaUrl: string;
    /**
     * 
     * @type {PlayLog}
     * @memberof Chapter
     */
    playLog?: PlayLog;
    /**
     * 
     * @type {Date}
     * @memberof Chapter
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Chapter
     */
    updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Chapter
     */
    deletedAt?: Date;
}

/**
 * Check if a given object implements the Chapter interface.
 */
export function instanceOfChapter(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "programId" in value;
    isInstance = isInstance && "order" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "isAttachedPin" in value;
    isInstance = isInstance && "mediaUrl" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function ChapterFromJSON(json: any): Chapter {
    return ChapterFromJSONTyped(json, false);
}

export function ChapterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Chapter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'programId': json['programId'],
        'order': json['order'],
        'title': json['title'],
        'isAttachedPin': json['isAttachedPin'],
        'mediaUrl': json['mediaUrl'],
        'playLog': !exists(json, 'playLog') ? undefined : PlayLogFromJSON(json['playLog']),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'deletedAt': !exists(json, 'deletedAt') ? undefined : (new Date(json['deletedAt'])),
    };
}

export function ChapterToJSON(value?: Chapter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'programId': value.programId,
        'order': value.order,
        'title': value.title,
        'isAttachedPin': value.isAttachedPin,
        'mediaUrl': value.mediaUrl,
        'playLog': PlayLogToJSON(value.playLog),
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'deletedAt': value.deletedAt === undefined ? undefined : (value.deletedAt.toISOString()),
    };
}

