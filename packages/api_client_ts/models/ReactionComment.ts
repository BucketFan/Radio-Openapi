/* tslint:disable */
/* eslint-disable */
/**
 * radio_openapi
 * radio_openapi
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@anycloud.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Profile } from './Profile';
import {
    ProfileFromJSON,
    ProfileFromJSONTyped,
    ProfileToJSON,
} from './Profile';

/**
 * 
 * @export
 * @interface ReactionComment
 */
export interface ReactionComment {
    /**
     * 
     * @type {number}
     * @memberof ReactionComment
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ReactionComment
     */
    content: string;
    /**
     * 
     * @type {Array<Profile>}
     * @memberof ReactionComment
     */
    likedProfiles: Array<Profile>;
    /**
     * 
     * @type {Profile}
     * @memberof ReactionComment
     */
    profile: Profile;
    /**
     * 
     * @type {boolean}
     * @memberof ReactionComment
     */
    isLiked: boolean;
    /**
     * オーナーがコメントを非表示にしているかどうか判定をする
     * @type {boolean}
     * @memberof ReactionComment
     */
    isHidden: boolean;
    /**
     * 
     * @type {Date}
     * @memberof ReactionComment
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ReactionComment
     */
    updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ReactionComment
     */
    deletedAt?: Date;
}

/**
 * Check if a given object implements the ReactionComment interface.
 */
export function instanceOfReactionComment(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "likedProfiles" in value;
    isInstance = isInstance && "profile" in value;
    isInstance = isInstance && "isLiked" in value;
    isInstance = isInstance && "isHidden" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function ReactionCommentFromJSON(json: any): ReactionComment {
    return ReactionCommentFromJSONTyped(json, false);
}

export function ReactionCommentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReactionComment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'content': json['content'],
        'likedProfiles': ((json['likedProfiles'] as Array<any>).map(ProfileFromJSON)),
        'profile': ProfileFromJSON(json['profile']),
        'isLiked': json['isLiked'],
        'isHidden': json['isHidden'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'deletedAt': !exists(json, 'deletedAt') ? undefined : (new Date(json['deletedAt'])),
    };
}

export function ReactionCommentToJSON(value?: ReactionComment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'content': value.content,
        'likedProfiles': ((value.likedProfiles as Array<any>).map(ProfileToJSON)),
        'profile': ProfileToJSON(value.profile),
        'isLiked': value.isLiked,
        'isHidden': value.isHidden,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'deletedAt': value.deletedAt === undefined ? undefined : (value.deletedAt.toISOString()),
    };
}

