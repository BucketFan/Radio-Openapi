/* tslint:disable */
/* eslint-disable */
/**
 * radio_openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChapterOfPlayLogEndChapterId200Response,
  ChapterOfPlayLogStartChapterIdRequest,
  DeleteChapterId200Response,
} from '../models';
import {
    ChapterOfPlayLogEndChapterId200ResponseFromJSON,
    ChapterOfPlayLogEndChapterId200ResponseToJSON,
    ChapterOfPlayLogStartChapterIdRequestFromJSON,
    ChapterOfPlayLogStartChapterIdRequestToJSON,
    DeleteChapterId200ResponseFromJSON,
    DeleteChapterId200ResponseToJSON,
} from '../models';

export interface ChapterOfPlayLogStartChapterIdOperationRequest {
    chapterOfPlayLogStartChapterIdRequest?: ChapterOfPlayLogStartChapterIdRequest;
}

export interface DeleteChapterIdRequest {
    id: number;
}

/**
 * ChapterApi - interface
 * 
 * @export
 * @interface ChapterApiInterface
 */
export interface ChapterApiInterface {
    /**
     * チャプター再生の開始時に叩くAPI。目的は、聴取ログを取得する。  返却値として、session（cookieのsessionとは関係ない。１つの聴取の始まりを文字化したもの）を返す。  それをend時に、PUTして終了を検知する。
     * @summary Start record chapter play log.
     * @param {ChapterOfPlayLogStartChapterIdRequest} [chapterOfPlayLogStartChapterIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapterApiInterface
     */
    chapterOfPlayLogStartChapterIdRaw(requestParameters: ChapterOfPlayLogStartChapterIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChapterOfPlayLogEndChapterId200Response>>;

    /**
     * チャプター再生の開始時に叩くAPI。目的は、聴取ログを取得する。  返却値として、session（cookieのsessionとは関係ない。１つの聴取の始まりを文字化したもの）を返す。  それをend時に、PUTして終了を検知する。
     * Start record chapter play log.
     */
    chapterOfPlayLogStartChapterId(chapterOfPlayLogStartChapterIdRequest?: ChapterOfPlayLogStartChapterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChapterOfPlayLogEndChapterId200Response>;

    /**
     * Chapterデータを論理削除するのと、S3から音声ファイルを削除するAPI（登録済みデータのみ。つまり、編集中のみ使うAPI）
     * @summary Delete Chapter\'s media file.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapterApiInterface
     */
    deleteChapterIdRaw(requestParameters: DeleteChapterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteChapterId200Response>>;

    /**
     * Chapterデータを論理削除するのと、S3から音声ファイルを削除するAPI（登録済みデータのみ。つまり、編集中のみ使うAPI）
     * Delete Chapter\'s media file.
     */
    deleteChapterId(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteChapterId200Response>;

}

/**
 * 
 */
export class ChapterApi extends runtime.BaseAPI implements ChapterApiInterface {

    /**
     * チャプター再生の開始時に叩くAPI。目的は、聴取ログを取得する。  返却値として、session（cookieのsessionとは関係ない。１つの聴取の始まりを文字化したもの）を返す。  それをend時に、PUTして終了を検知する。
     * Start record chapter play log.
     */
    async chapterOfPlayLogStartChapterIdRaw(requestParameters: ChapterOfPlayLogStartChapterIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChapterOfPlayLogEndChapterId200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/play_logs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChapterOfPlayLogStartChapterIdRequestToJSON(requestParameters.chapterOfPlayLogStartChapterIdRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChapterOfPlayLogEndChapterId200ResponseFromJSON(jsonValue));
    }

    /**
     * チャプター再生の開始時に叩くAPI。目的は、聴取ログを取得する。  返却値として、session（cookieのsessionとは関係ない。１つの聴取の始まりを文字化したもの）を返す。  それをend時に、PUTして終了を検知する。
     * Start record chapter play log.
     */
    async chapterOfPlayLogStartChapterId(chapterOfPlayLogStartChapterIdRequest?: ChapterOfPlayLogStartChapterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChapterOfPlayLogEndChapterId200Response> {
        const response = await this.chapterOfPlayLogStartChapterIdRaw({ chapterOfPlayLogStartChapterIdRequest: chapterOfPlayLogStartChapterIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Chapterデータを論理削除するのと、S3から音声ファイルを削除するAPI（登録済みデータのみ。つまり、編集中のみ使うAPI）
     * Delete Chapter\'s media file.
     */
    async deleteChapterIdRaw(requestParameters: DeleteChapterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteChapterId200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteChapterId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chapters/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteChapterId200ResponseFromJSON(jsonValue));
    }

    /**
     * Chapterデータを論理削除するのと、S3から音声ファイルを削除するAPI（登録済みデータのみ。つまり、編集中のみ使うAPI）
     * Delete Chapter\'s media file.
     */
    async deleteChapterId(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteChapterId200Response> {
        const response = await this.deleteChapterIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

}
