/* tslint:disable */
/* eslint-disable */
/**
 * radio_openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetProgramReactionComments200Response,
  PostProgramReactionComments200Response,
} from '../models';
import {
    GetProgramReactionComments200ResponseFromJSON,
    GetProgramReactionComments200ResponseToJSON,
    PostProgramReactionComments200ResponseFromJSON,
    PostProgramReactionComments200ResponseToJSON,
} from '../models';

export interface DeleteReactionCommentsCommentIdRequest {
    commentId: number;
}

export interface GetProgramReactionCommentsRequest {
    programId: number;
    order?: string;
    cursor?: string;
}

export interface PatchReactionCommentsCommentIdRequest {
    commentId: number;
}

export interface PatchReactionCommentsLikeToggleIdRequest {
    commentId: number;
}

/**
 * ReactionCommentsApi - interface
 * 
 * @export
 * @interface ReactionCommentsApiInterface
 */
export interface ReactionCommentsApiInterface {
    /**
     * リアクションコメントを削除するAPI。(コメント投稿者向け)
     * @summary Delete Reaction Comment
     * @param {number} commentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionCommentsApiInterface
     */
    deleteReactionCommentsCommentIdRaw(requestParameters: DeleteReactionCommentsCommentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostProgramReactionComments200Response>>;

    /**
     * リアクションコメントを削除するAPI。(コメント投稿者向け)
     * Delete Reaction Comment
     */
    deleteReactionCommentsCommentId(commentId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostProgramReactionComments200Response>;

    /**
     * 特定のプログラムのリアクションコメントを取得するAPI
     * @summary Get Reactions Comment
     * @param {number} programId 
     * @param {string} [order] asc or desc
     * @param {string} [cursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionCommentsApiInterface
     */
    getProgramReactionCommentsRaw(requestParameters: GetProgramReactionCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProgramReactionComments200Response>>;

    /**
     * 特定のプログラムのリアクションコメントを取得するAPI
     * Get Reactions Comment
     */
    getProgramReactionComments(programId: number, order?: string, cursor?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProgramReactionComments200Response>;

    /**
     * リアクションコメントを非表示/表示にするトグルAPI。（オーナー向け）
     * @summary Hidden Reaction Comment
     * @param {number} commentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionCommentsApiInterface
     */
    patchReactionCommentsCommentIdRaw(requestParameters: PatchReactionCommentsCommentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostProgramReactionComments200Response>>;

    /**
     * リアクションコメントを非表示/表示にするトグルAPI。（オーナー向け）
     * Hidden Reaction Comment
     */
    patchReactionCommentsCommentId(commentId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostProgramReactionComments200Response>;

    /**
     * 指定したコメントIDをLikeをON/OFFするAPI
     * @summary Like ON/OFF
     * @param {number} commentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionCommentsApiInterface
     */
    patchReactionCommentsLikeToggleIdRaw(requestParameters: PatchReactionCommentsLikeToggleIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostProgramReactionComments200Response>>;

    /**
     * 指定したコメントIDをLikeをON/OFFするAPI
     * Like ON/OFF
     */
    patchReactionCommentsLikeToggleId(commentId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostProgramReactionComments200Response>;

}

/**
 * 
 */
export class ReactionCommentsApi extends runtime.BaseAPI implements ReactionCommentsApiInterface {

    /**
     * リアクションコメントを削除するAPI。(コメント投稿者向け)
     * Delete Reaction Comment
     */
    async deleteReactionCommentsCommentIdRaw(requestParameters: DeleteReactionCommentsCommentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostProgramReactionComments200Response>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling deleteReactionCommentsCommentId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reaction_comments/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostProgramReactionComments200ResponseFromJSON(jsonValue));
    }

    /**
     * リアクションコメントを削除するAPI。(コメント投稿者向け)
     * Delete Reaction Comment
     */
    async deleteReactionCommentsCommentId(commentId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostProgramReactionComments200Response> {
        const response = await this.deleteReactionCommentsCommentIdRaw({ commentId: commentId }, initOverrides);
        return await response.value();
    }

    /**
     * 特定のプログラムのリアクションコメントを取得するAPI
     * Get Reactions Comment
     */
    async getProgramReactionCommentsRaw(requestParameters: GetProgramReactionCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProgramReactionComments200Response>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling getProgramReactionComments.');
        }

        const queryParameters: any = {};

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reaction_comments/of_program/{programId}`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProgramReactionComments200ResponseFromJSON(jsonValue));
    }

    /**
     * 特定のプログラムのリアクションコメントを取得するAPI
     * Get Reactions Comment
     */
    async getProgramReactionComments(programId: number, order?: string, cursor?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProgramReactionComments200Response> {
        const response = await this.getProgramReactionCommentsRaw({ programId: programId, order: order, cursor: cursor }, initOverrides);
        return await response.value();
    }

    /**
     * リアクションコメントを非表示/表示にするトグルAPI。（オーナー向け）
     * Hidden Reaction Comment
     */
    async patchReactionCommentsCommentIdRaw(requestParameters: PatchReactionCommentsCommentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostProgramReactionComments200Response>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling patchReactionCommentsCommentId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reaction_comments/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostProgramReactionComments200ResponseFromJSON(jsonValue));
    }

    /**
     * リアクションコメントを非表示/表示にするトグルAPI。（オーナー向け）
     * Hidden Reaction Comment
     */
    async patchReactionCommentsCommentId(commentId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostProgramReactionComments200Response> {
        const response = await this.patchReactionCommentsCommentIdRaw({ commentId: commentId }, initOverrides);
        return await response.value();
    }

    /**
     * 指定したコメントIDをLikeをON/OFFするAPI
     * Like ON/OFF
     */
    async patchReactionCommentsLikeToggleIdRaw(requestParameters: PatchReactionCommentsLikeToggleIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostProgramReactionComments200Response>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling patchReactionCommentsLikeToggleId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reaction_comments/like_toggle/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostProgramReactionComments200ResponseFromJSON(jsonValue));
    }

    /**
     * 指定したコメントIDをLikeをON/OFFするAPI
     * Like ON/OFF
     */
    async patchReactionCommentsLikeToggleId(commentId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostProgramReactionComments200Response> {
        const response = await this.patchReactionCommentsLikeToggleIdRaw({ commentId: commentId }, initOverrides);
        return await response.value();
    }

}
