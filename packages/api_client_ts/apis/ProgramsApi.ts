/* tslint:disable */
/* eslint-disable */
/**
 * radio_openapi
 * radio_openapi
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@anycloud.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProgram200Response,
  CreateProgramRequest,
  GetPrograms200Response,
} from '../models';
import {
    CreateProgram200ResponseFromJSON,
    CreateProgram200ResponseToJSON,
    CreateProgramRequestFromJSON,
    CreateProgramRequestToJSON,
    GetPrograms200ResponseFromJSON,
    GetPrograms200ResponseToJSON,
} from '../models';

export interface CreateProgramOperationRequest {
    createProgramRequest?: CreateProgramRequest;
}

export interface DeleteProgramRequest {
    id: number;
}

export interface DeleteProgramsIdAttachedPinRequest {
    id: number;
}

export interface GetClubProgramsRequest {
    id: number;
    cursor?: string;
    _switch?: string;
}

export interface GetClubProgramsForOwnerRequest {
    id: number;
    page?: number;
    isOnlyDraft?: boolean;
    pageSize?: number;
    order?: GetClubProgramsForOwnerOrderEnum;
}

export interface GetProgramChaptersRequest {
    id: number;
}

export interface GetProgramsOfClubIdForAttachedPinRequest {
    id: number;
}

export interface GetProgramsPlayedRequest {
    cursor?: Date;
}

export interface PatchProgramsIdAttachedPinRequest {
    id: number;
}

export interface PatchProgramsReservedToPublishRequest {
    authrizedToken?: string;
}

export interface PutProgramRequest {
    id: number;
    createProgramRequest?: CreateProgramRequest;
}

/**
 * ProgramsApi - interface
 * 
 * @export
 * @interface ProgramsApiInterface
 */
export interface ProgramsApiInterface {
    /**
     * Radioプログラム登録API
     * @summary Create Program
     * @param {CreateProgramRequest} [createProgramRequest] scopeは、誰でも見れる&#x3D;0  プラン入会者しか見れない&#x3D;1 attachedPlansIdsは、紐付けるPlanIdの配列 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    createProgramRaw(requestParameters: CreateProgramOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>>;

    /**
     * Radioプログラム登録API
     * Create Program
     */
    createProgram(createProgramRequest?: CreateProgramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response>;

    /**
     * Programの論理削除
     * @summary 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    deleteProgramRaw(requestParameters: DeleteProgramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>>;

    /**
     * Programの論理削除
     * 
     */
    deleteProgram(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response>;

    /**
     * ラジオの固定表示を解除するためのAPI
     * @summary 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    deleteProgramsIdAttachedPinRaw(requestParameters: DeleteProgramsIdAttachedPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>>;

    /**
     * ラジオの固定表示を解除するためのAPI
     * 
     */
    deleteProgramsIdAttachedPin(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response>;

    /**
     * クラブに登録されているプログラム一覧を取得するAPI
     * @summary GET Club\'s programs.
     * @param {number} id 
     * @param {string} [cursor] 次ページへのカーソル（ProgramID）
     * @param {string} [_switch] 全て、閲覧可能、プラン別のタブスイッチャー プランの場合は、プランID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    getClubProgramsRaw(requestParameters: GetClubProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>>;

    /**
     * クラブに登録されているプログラム一覧を取得するAPI
     * GET Club\'s programs.
     */
    getClubPrograms(id: number, cursor?: string, _switch?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response>;

    /**
     * クラブに登録されているプログラム一覧を取得するAPI。オーナー管理画面向け（下書きでフィルター機能がある）
     * @summary GET Club\'s Programs For Owner\'s Admin page.
     * @param {number} id 
     * @param {number} [page] ページ数
     * @param {boolean} [isOnlyDraft] ONの場合、下書きのみ取得する
     * @param {number} [pageSize] 1ページごとの取得件数
     * @param {'ASC' | 'DESC'} [order] Enum: \&quot;ASC\&quot; \&quot;DESC\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    getClubProgramsForOwnerRaw(requestParameters: GetClubProgramsForOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>>;

    /**
     * クラブに登録されているプログラム一覧を取得するAPI。オーナー管理画面向け（下書きでフィルター機能がある）
     * GET Club\'s Programs For Owner\'s Admin page.
     */
    getClubProgramsForOwner(id: number, page?: number, isOnlyDraft?: boolean, pageSize?: number, order?: GetClubProgramsForOwnerOrderEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response>;

    /**
     * プログラム内の音声データ一覧を取得するAPI
     * @summary Get program\'s chapters
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    getProgramChaptersRaw(requestParameters: GetProgramChaptersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>>;

    /**
     * プログラム内の音声データ一覧を取得するAPI
     * Get program\'s chapters
     */
    getProgramChapters(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response>;

    /**
     * 主にマイページ向けの、特定の会員の拝聴可能なRadioプログラムの一覧取得API
     * @summary List of programs available to members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    getProgramsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>>;

    /**
     * 主にマイページ向けの、特定の会員の拝聴可能なRadioプログラムの一覧取得API
     * List of programs available to members
     */
    getPrograms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response>;

    /**
     * クラブに登録されている固定プログラムの一覧を取得するAPI
     * @summary Get attached pin club\'s programs
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    getProgramsOfClubIdForAttachedPinRaw(requestParameters: GetProgramsOfClubIdForAttachedPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>>;

    /**
     * クラブに登録されている固定プログラムの一覧を取得するAPI
     * Get attached pin club\'s programs
     */
    getProgramsOfClubIdForAttachedPin(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response>;

    /**
     * 特定のユーザーの再生履歴からプログラム一覧を返すAPI
     * @summary Your GET endpoint
     * @param {Date} [cursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    getProgramsPlayedRaw(requestParameters: GetProgramsPlayedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>>;

    /**
     * 特定のユーザーの再生履歴からプログラム一覧を返すAPI
     * Your GET endpoint
     */
    getProgramsPlayed(cursor?: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response>;

    /**
     * ラジオを固定表示するためのAPI。固定表示できるラジオは1つのみで、すでにある場合は上書きされる。
     * @summary 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    patchProgramsIdAttachedPinRaw(requestParameters: PatchProgramsIdAttachedPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>>;

    /**
     * ラジオを固定表示するためのAPI。固定表示できるラジオは1つのみで、すでにある場合は上書きされる。
     * 
     */
    patchProgramsIdAttachedPin(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response>;

    /**
     * 放送開始設定が、予約投稿になっていてかつ、予約投稿時間が過去になっているプログラム全てを、公開状態にするAPI。 （AWSのLambdaから定期的にリクエストが飛ぶ）
     * @summary Switch reserved all program to publish
     * @param {string} [authrizedToken] 固定の認証トークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    patchProgramsReservedToPublishRaw(requestParameters: PatchProgramsReservedToPublishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 放送開始設定が、予約投稿になっていてかつ、予約投稿時間が過去になっているプログラム全てを、公開状態にするAPI。 （AWSのLambdaから定期的にリクエストが飛ぶ）
     * Switch reserved all program to publish
     */
    patchProgramsReservedToPublish(authrizedToken?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Radioプログラム編集API（オーナー向け）
     * @summary Edit program
     * @param {number} id 
     * @param {CreateProgramRequest} [createProgramRequest] scopeは、誰でも見れる&#x3D;0  プラン入会者しか見れない&#x3D;1 attachedPlansIdsは、紐付けるPlanIdの配列 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    putProgramRaw(requestParameters: PutProgramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>>;

    /**
     * Radioプログラム編集API（オーナー向け）
     * Edit program
     */
    putProgram(id: number, createProgramRequest?: CreateProgramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response>;

}

/**
 * 
 */
export class ProgramsApi extends runtime.BaseAPI implements ProgramsApiInterface {

    /**
     * Radioプログラム登録API
     * Create Program
     */
    async createProgramRaw(requestParameters: CreateProgramOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/programs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProgramRequestToJSON(requestParameters.createProgramRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProgram200ResponseFromJSON(jsonValue));
    }

    /**
     * Radioプログラム登録API
     * Create Program
     */
    async createProgram(createProgramRequest?: CreateProgramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response> {
        const response = await this.createProgramRaw({ createProgramRequest: createProgramRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Programの論理削除
     * 
     */
    async deleteProgramRaw(requestParameters: DeleteProgramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProgram.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/programs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProgram200ResponseFromJSON(jsonValue));
    }

    /**
     * Programの論理削除
     * 
     */
    async deleteProgram(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response> {
        const response = await this.deleteProgramRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * ラジオの固定表示を解除するためのAPI
     * 
     */
    async deleteProgramsIdAttachedPinRaw(requestParameters: DeleteProgramsIdAttachedPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProgramsIdAttachedPin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/programs/{id}/attached_pin`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProgram200ResponseFromJSON(jsonValue));
    }

    /**
     * ラジオの固定表示を解除するためのAPI
     * 
     */
    async deleteProgramsIdAttachedPin(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response> {
        const response = await this.deleteProgramsIdAttachedPinRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * クラブに登録されているプログラム一覧を取得するAPI
     * GET Club\'s programs.
     */
    async getClubProgramsRaw(requestParameters: GetClubProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClubPrograms.');
        }

        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters._switch !== undefined) {
            queryParameters['switch'] = requestParameters._switch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/programs/of_club/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPrograms200ResponseFromJSON(jsonValue));
    }

    /**
     * クラブに登録されているプログラム一覧を取得するAPI
     * GET Club\'s programs.
     */
    async getClubPrograms(id: number, cursor?: string, _switch?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response> {
        const response = await this.getClubProgramsRaw({ id: id, cursor: cursor, _switch: _switch }, initOverrides);
        return await response.value();
    }

    /**
     * クラブに登録されているプログラム一覧を取得するAPI。オーナー管理画面向け（下書きでフィルター機能がある）
     * GET Club\'s Programs For Owner\'s Admin page.
     */
    async getClubProgramsForOwnerRaw(requestParameters: GetClubProgramsForOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClubProgramsForOwner.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.isOnlyDraft !== undefined) {
            queryParameters['isOnlyDraft'] = requestParameters.isOnlyDraft;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/programs/of_club/{id}/for_owner`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPrograms200ResponseFromJSON(jsonValue));
    }

    /**
     * クラブに登録されているプログラム一覧を取得するAPI。オーナー管理画面向け（下書きでフィルター機能がある）
     * GET Club\'s Programs For Owner\'s Admin page.
     */
    async getClubProgramsForOwner(id: number, page?: number, isOnlyDraft?: boolean, pageSize?: number, order?: GetClubProgramsForOwnerOrderEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response> {
        const response = await this.getClubProgramsForOwnerRaw({ id: id, page: page, isOnlyDraft: isOnlyDraft, pageSize: pageSize, order: order }, initOverrides);
        return await response.value();
    }

    /**
     * プログラム内の音声データ一覧を取得するAPI
     * Get program\'s chapters
     */
    async getProgramChaptersRaw(requestParameters: GetProgramChaptersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProgramChapters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/programs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProgram200ResponseFromJSON(jsonValue));
    }

    /**
     * プログラム内の音声データ一覧を取得するAPI
     * Get program\'s chapters
     */
    async getProgramChapters(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response> {
        const response = await this.getProgramChaptersRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * 主にマイページ向けの、特定の会員の拝聴可能なRadioプログラムの一覧取得API
     * List of programs available to members
     */
    async getProgramsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/programs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPrograms200ResponseFromJSON(jsonValue));
    }

    /**
     * 主にマイページ向けの、特定の会員の拝聴可能なRadioプログラムの一覧取得API
     * List of programs available to members
     */
    async getPrograms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response> {
        const response = await this.getProgramsRaw(initOverrides);
        return await response.value();
    }

    /**
     * クラブに登録されている固定プログラムの一覧を取得するAPI
     * Get attached pin club\'s programs
     */
    async getProgramsOfClubIdForAttachedPinRaw(requestParameters: GetProgramsOfClubIdForAttachedPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProgramsOfClubIdForAttachedPin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/programs/of_club/{id}/for_attached_pin`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPrograms200ResponseFromJSON(jsonValue));
    }

    /**
     * クラブに登録されている固定プログラムの一覧を取得するAPI
     * Get attached pin club\'s programs
     */
    async getProgramsOfClubIdForAttachedPin(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response> {
        const response = await this.getProgramsOfClubIdForAttachedPinRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * 特定のユーザーの再生履歴からプログラム一覧を返すAPI
     * Your GET endpoint
     */
    async getProgramsPlayedRaw(requestParameters: GetProgramsPlayedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>> {
        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = (requestParameters.cursor as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/programs/played`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPrograms200ResponseFromJSON(jsonValue));
    }

    /**
     * 特定のユーザーの再生履歴からプログラム一覧を返すAPI
     * Your GET endpoint
     */
    async getProgramsPlayed(cursor?: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response> {
        const response = await this.getProgramsPlayedRaw({ cursor: cursor }, initOverrides);
        return await response.value();
    }

    /**
     * ラジオを固定表示するためのAPI。固定表示できるラジオは1つのみで、すでにある場合は上書きされる。
     * 
     */
    async patchProgramsIdAttachedPinRaw(requestParameters: PatchProgramsIdAttachedPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchProgramsIdAttachedPin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/programs/{id}/attached_pin`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProgram200ResponseFromJSON(jsonValue));
    }

    /**
     * ラジオを固定表示するためのAPI。固定表示できるラジオは1つのみで、すでにある場合は上書きされる。
     * 
     */
    async patchProgramsIdAttachedPin(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response> {
        const response = await this.patchProgramsIdAttachedPinRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * 放送開始設定が、予約投稿になっていてかつ、予約投稿時間が過去になっているプログラム全てを、公開状態にするAPI。 （AWSのLambdaから定期的にリクエストが飛ぶ）
     * Switch reserved all program to publish
     */
    async patchProgramsReservedToPublishRaw(requestParameters: PatchProgramsReservedToPublishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authrizedToken !== undefined && requestParameters.authrizedToken !== null) {
            headerParameters['AuthrizedToken'] = String(requestParameters.authrizedToken);
        }

        const response = await this.request({
            path: `/programs/reserved_to_pubslish`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 放送開始設定が、予約投稿になっていてかつ、予約投稿時間が過去になっているプログラム全てを、公開状態にするAPI。 （AWSのLambdaから定期的にリクエストが飛ぶ）
     * Switch reserved all program to publish
     */
    async patchProgramsReservedToPublish(authrizedToken?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchProgramsReservedToPublishRaw({ authrizedToken: authrizedToken }, initOverrides);
    }

    /**
     * Radioプログラム編集API（オーナー向け）
     * Edit program
     */
    async putProgramRaw(requestParameters: PutProgramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putProgram.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/programs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProgramRequestToJSON(requestParameters.createProgramRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProgram200ResponseFromJSON(jsonValue));
    }

    /**
     * Radioプログラム編集API（オーナー向け）
     * Edit program
     */
    async putProgram(id: number, createProgramRequest?: CreateProgramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response> {
        const response = await this.putProgramRaw({ id: id, createProgramRequest: createProgramRequest }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetClubProgramsForOwnerOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetClubProgramsForOwnerOrderEnum = typeof GetClubProgramsForOwnerOrderEnum[keyof typeof GetClubProgramsForOwnerOrderEnum];
