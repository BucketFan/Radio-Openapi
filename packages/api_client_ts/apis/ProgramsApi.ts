/* tslint:disable */
/* eslint-disable */
/**
 * radio_openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProgram200Response,
  CreateProgramRequest,
  GetProgramChapters200Response,
  GetPrograms200Response,
} from '../models';
import {
    CreateProgram200ResponseFromJSON,
    CreateProgram200ResponseToJSON,
    CreateProgramRequestFromJSON,
    CreateProgramRequestToJSON,
    GetProgramChapters200ResponseFromJSON,
    GetProgramChapters200ResponseToJSON,
    GetPrograms200ResponseFromJSON,
    GetPrograms200ResponseToJSON,
} from '../models';

export interface CreateProgramOperationRequest {
    createProgramRequest?: CreateProgramRequest;
}

export interface GetClubProgramsRequest {
    slug: string;
    cursor?: string;
    _switch?: string;
}

export interface GetClubProgramsForOwnerRequest {
    slug: string;
    cursor?: string;
    isDraft?: string;
}

export interface GetProgramChaptersRequest {
    id: number;
}

export interface PatchProgramsReservedToPubslishRequest {
    authrizedToken?: string;
}

/**
 * ProgramsApi - interface
 * 
 * @export
 * @interface ProgramsApiInterface
 */
export interface ProgramsApiInterface {
    /**
     * Radioプログラム登録API
     * @summary Create Program
     * @param {CreateProgramRequest} [createProgramRequest] scopeは、誰でも見れる&#x3D;0  プラン入会者しか見れない&#x3D;1 broadcastStatusは、放映中&#x3D;0, 予約中&#x3D;1 attachedPlansIdsは、紐付けるPlanIdの配列
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    createProgramRaw(requestParameters: CreateProgramOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>>;

    /**
     * Radioプログラム登録API
     * Create Program
     */
    createProgram(createProgramRequest?: CreateProgramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response>;

    /**
     * クラブに登録されているプログラム一覧を取得するAPI
     * @summary GET Club\'s programs.
     * @param {string} slug 
     * @param {string} [cursor] 次ページへのカーソル（ProgramID）
     * @param {string} [_switch] 全て、閲覧可能、プラン別のタブスイッチャー プランの場合は、プランID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    getClubProgramsRaw(requestParameters: GetClubProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>>;

    /**
     * クラブに登録されているプログラム一覧を取得するAPI
     * GET Club\'s programs.
     */
    getClubPrograms(slug: string, cursor?: string, _switch?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response>;

    /**
     * クラブに登録されているプログラム一覧を取得するAPI。オーナー管理画面向け（下書きでフィルター機能がある）
     * @summary GET Club\'s Programs For Owner\'s Admin page.
     * @param {string} slug 
     * @param {string} [cursor] 次ページへのカーソル（ProgramID）
     * @param {string} [isDraft] ONの場合、下書きのみ取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    getClubProgramsForOwnerRaw(requestParameters: GetClubProgramsForOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>>;

    /**
     * クラブに登録されているプログラム一覧を取得するAPI。オーナー管理画面向け（下書きでフィルター機能がある）
     * GET Club\'s Programs For Owner\'s Admin page.
     */
    getClubProgramsForOwner(slug: string, cursor?: string, isDraft?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response>;

    /**
     * プログラム内の音声データ一覧を取得するAPI
     * @summary Get program\'s chapters
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    getProgramChaptersRaw(requestParameters: GetProgramChaptersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProgramChapters200Response>>;

    /**
     * プログラム内の音声データ一覧を取得するAPI
     * Get program\'s chapters
     */
    getProgramChapters(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProgramChapters200Response>;

    /**
     * 放送開始設定が、予約投稿になっていてかつ、予約投稿時間が過去になっているプログラム全てを、公開状態にするAPI。 （AWSのLambdaから定期的にリクエストが飛ぶ）
     * @summary Switch reserved all program to publish
     * @param {string} [authrizedToken] 固定の認証トークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApiInterface
     */
    patchProgramsReservedToPubslishRaw(requestParameters: PatchProgramsReservedToPubslishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 放送開始設定が、予約投稿になっていてかつ、予約投稿時間が過去になっているプログラム全てを、公開状態にするAPI。 （AWSのLambdaから定期的にリクエストが飛ぶ）
     * Switch reserved all program to publish
     */
    patchProgramsReservedToPubslish(authrizedToken?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class ProgramsApi extends runtime.BaseAPI implements ProgramsApiInterface {

    /**
     * Radioプログラム登録API
     * Create Program
     */
    async createProgramRaw(requestParameters: CreateProgramOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProgram200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/programs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProgramRequestToJSON(requestParameters.createProgramRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProgram200ResponseFromJSON(jsonValue));
    }

    /**
     * Radioプログラム登録API
     * Create Program
     */
    async createProgram(createProgramRequest?: CreateProgramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProgram200Response> {
        const response = await this.createProgramRaw({ createProgramRequest: createProgramRequest }, initOverrides);
        return await response.value();
    }

    /**
     * クラブに登録されているプログラム一覧を取得するAPI
     * GET Club\'s programs.
     */
    async getClubProgramsRaw(requestParameters: GetClubProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling getClubPrograms.');
        }

        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters._switch !== undefined) {
            queryParameters['switch'] = requestParameters._switch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/programs/of_club/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPrograms200ResponseFromJSON(jsonValue));
    }

    /**
     * クラブに登録されているプログラム一覧を取得するAPI
     * GET Club\'s programs.
     */
    async getClubPrograms(slug: string, cursor?: string, _switch?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response> {
        const response = await this.getClubProgramsRaw({ slug: slug, cursor: cursor, _switch: _switch }, initOverrides);
        return await response.value();
    }

    /**
     * クラブに登録されているプログラム一覧を取得するAPI。オーナー管理画面向け（下書きでフィルター機能がある）
     * GET Club\'s Programs For Owner\'s Admin page.
     */
    async getClubProgramsForOwnerRaw(requestParameters: GetClubProgramsForOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPrograms200Response>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling getClubProgramsForOwner.');
        }

        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.isDraft !== undefined) {
            queryParameters['isDraft'] = requestParameters.isDraft;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/programs/of_club/{slug}/for_owner`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPrograms200ResponseFromJSON(jsonValue));
    }

    /**
     * クラブに登録されているプログラム一覧を取得するAPI。オーナー管理画面向け（下書きでフィルター機能がある）
     * GET Club\'s Programs For Owner\'s Admin page.
     */
    async getClubProgramsForOwner(slug: string, cursor?: string, isDraft?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPrograms200Response> {
        const response = await this.getClubProgramsForOwnerRaw({ slug: slug, cursor: cursor, isDraft: isDraft }, initOverrides);
        return await response.value();
    }

    /**
     * プログラム内の音声データ一覧を取得するAPI
     * Get program\'s chapters
     */
    async getProgramChaptersRaw(requestParameters: GetProgramChaptersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProgramChapters200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProgramChapters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/programs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProgramChapters200ResponseFromJSON(jsonValue));
    }

    /**
     * プログラム内の音声データ一覧を取得するAPI
     * Get program\'s chapters
     */
    async getProgramChapters(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProgramChapters200Response> {
        const response = await this.getProgramChaptersRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * 放送開始設定が、予約投稿になっていてかつ、予約投稿時間が過去になっているプログラム全てを、公開状態にするAPI。 （AWSのLambdaから定期的にリクエストが飛ぶ）
     * Switch reserved all program to publish
     */
    async patchProgramsReservedToPubslishRaw(requestParameters: PatchProgramsReservedToPubslishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authrizedToken !== undefined && requestParameters.authrizedToken !== null) {
            headerParameters['AuthrizedToken'] = String(requestParameters.authrizedToken);
        }

        const response = await this.request({
            path: `/programs/reserved_to_pubslish`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 放送開始設定が、予約投稿になっていてかつ、予約投稿時間が過去になっているプログラム全てを、公開状態にするAPI。 （AWSのLambdaから定期的にリクエストが飛ぶ）
     * Switch reserved all program to publish
     */
    async patchProgramsReservedToPubslish(authrizedToken?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchProgramsReservedToPubslishRaw({ authrizedToken: authrizedToken }, initOverrides);
    }

}
